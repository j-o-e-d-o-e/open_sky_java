/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package net.joedoe;

import com.google.gson.Gson;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.opensky.api.OpenSkyApi;
import org.opensky.api.OpenSkyApi.BoundingBox;
import org.opensky.model.OpenSkyStates;
import org.opensky.model.StateVector;

import java.io.IOException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;
import java.util.Objects;
import java.util.Properties;
import java.util.logging.Logger;
import java.util.stream.Collectors;

public class App {
    private BoundingBox box;
    private int minHeading, maxHeading, maxAltitude;
    private String weatherUrl;

    private Logger logger = Logger.getLogger(App.class.getName());

    private void getPlanes() {
        OpenSkyStates states = null;
        try {
            states = new OpenSkyApi().getStates(0, null, box);
        } catch (Exception e) {
            logger.info("No states found.");
        }
        if (states == null) return;
        List<StateVector> planes = (List<StateVector>) states.getStates();
        if (planes == null || planes.size() == 0) {
            logger.info("No planes found.");
            return;
        }
        logger.info("Number of all planes: " + planes.size());
        planes = planes.stream().filter(this::include).collect(Collectors.toList());
        if (planes.size() == 0) {
            logger.info("No planes met requirements.");
            return;
        }
        logger.info("Number of valid planes: " + planes.size());
        for (StateVector plane : planes) {
            long timestamp = System.currentTimeMillis();
            LocalDateTime date = LocalDateTime.ofInstant(Instant.ofEpochMilli(timestamp), ZoneId.systemDefault());
            String message = "Date: " + date + " / " +
                    "Icao 24: " + plane.getIcao24() + " / " +
                    "Altitude: " + Math.round(plane.getGeoAltitude()) + " m" + " / " +
                    "Velocity: " + Math.round(plane.getVelocity() * 60 * 60 / 1000) + " km/h" + " / " +
                    "Heading: " + plane.getHeading() + "Â°";
            logger.info(message);
        }
    }

    private boolean include(StateVector plane) {
        return plane.getHeading() > minHeading && plane.getHeading() < maxHeading && plane.getGeoAltitude() < maxAltitude;
    }

    private void getWeather() {
        Request request = new Request.Builder().url(weatherUrl).build();
        try (Response response = new OkHttpClient().newCall(request).execute()) {
            String json = Objects.requireNonNull(response.body()).string();
            Weather weather = new Gson().fromJson(json, Weather.class);
            logger.info(weather.toString());
        } catch (Exception e) {
            logger.info("No weather data found.");

        }
    }

    private void loadProps() {
        Properties props = new Properties();
        try {
            props.load(getClass().getResourceAsStream("/application.properties"));
        } catch (IOException | NullPointerException e) {
            if (e instanceof NullPointerException) {
                logger.info("Change path of properties-file in App.java to: /application-default.properties");
                System.exit(1);
            }
            e.printStackTrace();
        }
        float minLatitude = Float.parseFloat(props.getProperty("minLatitude"));
        float maxLatitude = Float.parseFloat(props.getProperty("maxLatitude"));
        float minLongitude = Float.parseFloat(props.getProperty("minLongitude"));
        float maxLongitude = Float.parseFloat(props.getProperty("maxLongitude"));
        box = new BoundingBox(minLatitude, maxLatitude, minLongitude, maxLongitude);

        minHeading = Integer.parseInt(props.getProperty("minHeading"));
        maxHeading = Integer.parseInt(props.getProperty("maxHeading"));
        maxAltitude = Integer.parseInt(props.getProperty("maxGeoAltitude"));

        weatherUrl = props.getProperty("weatherUrl");
    }

    public static void main(String[] args) {
        App app = new App();
        app.loadProps();
        app.getWeather();
        app.getPlanes();
    }
}
